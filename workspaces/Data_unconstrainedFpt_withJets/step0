#!/usr/bin/env python
#
# Prepare the inputs for HistFactory
#
# Carlos.Solans@cern.ch
# January 2014

import ROOT
ROOT.gROOT.SetBatch(True)
from collections import defaultdict
import datetime
import os
import pprint
import sys
#import AtlasStyle
import array

"""
Prepare a dataset based on the inputs from Suneet (TH2D l1pt vs Mcoll).
"""


def average_histogram(h1, h2, target_name='average_histo'):
    "Clone the first histograms and fill it with the bin-by-bin average of h1 and h2"
    h_out = h1.Clone(target_name)
    h_out.Add(h2)
    h_out.Scale(0.5)
    return h_out


#AtlasStyle.SetAtlasStyle()
tln = ROOT.TLine()
tla = ROOT.TLatex()

### INPUT DIR ##################

input_dir = "/scratch/gerbaudo/hlfv_fit_tests/take1/FitModel/Apr_26_histos/"
output_dir = "data/"

### SIGNAL STRENGTH ###########
strength = 0.0
#############################
data_variations = ['NOM']
fake_variations = ['NOM',
                   'EL_RE_UP', 'EL_RE_DOWN', 'EL_FR_UP', 'EL_FR_DOWN',
                   'MU_RE_UP', 'MU_RE_DOWN', 'MU_FR_UP', 'MU_FR_DOWN']
sign_variations = ['NOM']
### OUTPUT FILE ##############
fw1 = ROOT.TFile(output_dir+"/simple.root","RECREATE")
jet_variations = ['', '_jets']
mem = []

class Variation(object):
    """
    Hold up/down normalization in fake variations
    """
    def __init__(self, emu_mue='', sysname='', jetvariation='', l1pt='', updown=(1.0, 1.0)):
        self.emme = emu_mue
        self.sys = sysname
        self.jet = jetvariation
        self.l1pt = l1pt
        self.up = updown[0]
        self.do = updown[1]
    def as_dict(self, precision=6):
        "stringified dictionary, so that we can set the precision"
        def as_string(f, precision=precision):
            precision = str(precision)
            return ("{0:."+precision+"f}").format(f)
        return {'UPvalue': self.up, 'DNvalue': self.do}
        # return "{'UPvalue': %s, 'DNvalue': %s}" % (as_string(self.up), as_string(self.do))

class FakeSystematicRegister(object):
    """
    Holder for the normalization scales of the fake systematics.
    Store the values and print them out to a file that is then fed to
    step1.
    """
    def __init__(self):
        self._variations = []
    def add(self, emu_mue='', sysname='', jetvariation='', l1pt='', updown=(1.0, 1.0)):
        self._variations.append(Variation(emu_mue, sysname, jetvariation, l1pt, updown))
    def as_dict(self):
        "example keys : [emu_MU_FR][_jets][l1pt0][UPvalue]"
        emu_mue        =  sorted(list(set(v.emme for v in self._variations)))
        systematics    = sorted(list(set(v.sys for v in self._variations)))
        jet_variations = sorted(list(set(v.jet for v in self._variations)))
        l1pts          = sorted(list(set(v.l1pt for v in self._variations)))
        # I could use a nested defaultdict, but then pprint doesn't work nicely
        out_dict = dict([(emme+'_'+sys,
                          dict([(j,
                                 dict([(l1pt, {})
                                       for l1pt in l1pts]))
                                for j in jet_variations]))
                          for emme in emu_mue for sys in systematics])
        for var in self._variations:
            out_dict[var.emme+'_'+var.sys][var.jet][var.l1pt] = var.as_dict()
        return out_dict

fake_systematics = FakeSystematicRegister()

for jet in jet_variations:
        ### FINAL BINNING ############
        target_pt1_bins = array.array('f',(12,15,20,25,30,35,1000))
        target_m_bins = (array.array('f', [0] + range(60, 250, 5) + [250,260,270,280,290,300,320,350,400,450]) if jet=='' else
                         array.array('f', (0,60,80,100,120,130,140,150,160,180,200,230,260,300,350,400,450)))
	#### Get Files and histograms ####
        files = {}
        histos = {}
        for sample, variations in [('data', data_variations),
                                   ('fake', fake_variations),
                                   ('signaltaue', sign_variations),
                                   ('signaltaumu', sign_variations)]:
                for variation in variations:
                        for em_me in ['emu', 'mue']:
                                key = sample+'_'+variation+'_sr_'+em_me+'_os'+jet
                                filename = input_dir+'/'+key+'.root'
                                files[key] = ROOT.TFile(filename)
                                histoname = 'h_mcoll_vs_pt1_'+sample+'_'+variation+'_sr_'+em_me+'_os'+jet
                                clonename = ""
                                histo = files[key].Get(histoname)
                                if not histo:
                                    print "missing %s from %s"%(histoname, filename)
                                else:
                                    histos[key] = histo
	### Get ME histograms
	h2meOrig                 = histos['data_NOM_sr_mue_os'+jet]
	h2meOrig_fake            = histos['fake_NOM_sr_mue_os'+jet]
	h2meOrig_fake_EL_RE_UP   = histos['fake_EL_RE_UP_sr_mue_os'+jet]
	h2meOrig_fake_EL_RE_DOWN = histos['fake_EL_RE_DOWN_sr_mue_os'+jet]
	h2meOrig_fake_EL_FR_UP   = histos['fake_EL_FR_UP_sr_mue_os'+jet]
	h2meOrig_fake_EL_FR_DOWN = histos['fake_EL_FR_DOWN_sr_mue_os'+jet]
	h2meOrig_fake_MU_RE_UP   = histos['fake_MU_RE_UP_sr_mue_os'+jet]
	h2meOrig_fake_MU_RE_DOWN = histos['fake_MU_RE_DOWN_sr_mue_os'+jet]
	h2meOrig_fake_MU_FR_UP   = histos['fake_MU_FR_UP_sr_mue_os'+jet]
	h2meOrig_fake_MU_FR_DOWN = histos['fake_MU_FR_DOWN_sr_mue_os'+jet]
	h2sgOrig                 = histos['signaltaumu_NOM_sr_mue_os'+jet]

	h2emOrig                 = histos['data_NOM_sr_emu_os'+jet]
	h2emOrig_fake            = histos['fake_NOM_sr_emu_os'+jet]
	h2emOrig_fake_EL_RE_UP   = histos['fake_EL_RE_UP_sr_emu_os'+jet]
	h2emOrig_fake_EL_RE_DOWN = histos['fake_EL_RE_DOWN_sr_emu_os'+jet]
	h2emOrig_fake_EL_FR_UP   = histos['fake_EL_FR_UP_sr_emu_os'+jet]
	h2emOrig_fake_EL_FR_DOWN = histos['fake_EL_FR_DOWN_sr_emu_os'+jet]
	h2emOrig_fake_MU_RE_UP   = histos['fake_MU_RE_UP_sr_emu_os'+jet]
	h2emOrig_fake_MU_RE_DOWN = histos['fake_MU_RE_DOWN_sr_emu_os'+jet]
	h2emOrig_fake_MU_FR_UP   = histos['fake_MU_FR_UP_sr_emu_os'+jet]
	h2emOrig_fake_MU_FR_DOWN = histos['fake_MU_FR_DOWN_sr_emu_os'+jet]
	h2wrsgOrig               = histos['signaltaue_NOM_sr_mue_os'+jet]

	## Rebin 2D histos ###

	print "Rebinning..."
	xaxis = h2meOrig.GetXaxis()
	yaxis = h2meOrig.GetYaxis()

        n_xbin = len(target_pt1_bins)-1
        n_ybin = len(target_m_bins)-1

        def rebinned_histoname(sample='', variation='', em_me=''):
            "note that the naming here is slightly different; but use the same key"
            templ_h_name = 'h_SR_%s_Rebinned_mcollCorr_x_pt1_%s'
            hname = templ_h_name%('EM' if em_me=='emu' else
                                  'ME' if em_me=='mue' else 'unknown',
                                  sample+('' if variation=='NOM' else ('_'+variation)))
            return hname

        def slice_histo_in_pt(h_m_vs_pt, h_m, pt_min, pt_max):
            "project 2D histo m_vs_pt on 1D m slicing a pt interval [pt_min, pt_max["
            xaxis = h_m_vs_pt.GetXaxis()
            yaxis = h_m_vs_pt.GetYaxis()
            nbinsx = xaxis.GetNbins()
            nbinsy = yaxis.GetNbins()
            origin_pt_bins = array.array('f', [xaxis.GetBinLowEdge(j+1) for j in range(nbinsx+1)])
            origin_m_bins  = array.array('f', [yaxis.GetBinLowEdge(k+1) for k in range(nbinsy+1)])
            n_m_bins = len(origin_m_bins)-1
            m_binning = (n_m_bins, origin_m_bins)
            dummy_histo = ROOT.TH1F("dummy", '', *m_binning)
            for pt in origin_pt_bins:
    		if pt_min <= pt < pt_max:
    		    for mass in origin_m_bins:
                        dest_bin = dummy_histo.FindBin(mass)
                        orig_bin = h_m_vs_pt.FindBin(pt, mass)
                        dummy_histo.SetBinContent(dest_bin, h_m_vs_pt.GetBinContent(orig_bin))
                        dummy_histo.SetBinError  (dest_bin, h_m_vs_pt.GetBinError  (orig_bin))
                    h_m.Add(dummy_histo)

        title = "l_1 p^{T};Mcoll (GeV)"
        binning = (n_xbin,target_pt1_bins,n_ybin,target_m_bins)
        rebinned_histos = {}
        for sample, variations in [('data', data_variations),
                                   ('fake', fake_variations)]:
            for variation in variations:
                for em_me in ['emu', 'mue']:
                    key = sample+'_'+variation+'_sr_'+em_me+'_os'+jet
                    hname = rebinned_histoname(sample, variation, em_me)
                    rebinned_histos[key] = ROOT.TH2F(hname, title, *binning)
        rebinned_histos['signaltaumu_NOM_sr_mue_os'+jet] = ROOT.TH2F("h_SR_Sig_Rebinned_mcollCorr_x_pt1%s"%jet,      title, *binning)
	rebinned_histos['signaltaue_NOM_sr_mue_os'+jet] =  ROOT.TH2F("h_SR_WrongSig_Rebinned_mcollCorr_x_pt1%s"%jet, title, *binning)

	h2me                 = rebinned_histos['data_NOM_sr_mue_os'+jet]
	h2meFakes            = rebinned_histos['fake_NOM_sr_mue_os'+jet]
	h2meFakes_EL_RE_UP   = rebinned_histos['fake_EL_RE_UP_sr_mue_os'+jet]
	h2meFakes_EL_RE_DOWN = rebinned_histos['fake_EL_RE_DOWN_sr_mue_os'+jet]
	h2meFakes_EL_FR_UP   = rebinned_histos['fake_EL_FR_UP_sr_mue_os'+jet]
	h2meFakes_EL_FR_DOWN = rebinned_histos['fake_EL_FR_DOWN_sr_mue_os'+jet]
	h2meFakes_MU_RE_UP   = rebinned_histos['fake_MU_RE_UP_sr_mue_os'+jet]
	h2meFakes_MU_RE_DOWN = rebinned_histos['fake_MU_RE_DOWN_sr_mue_os'+jet]
	h2meFakes_MU_FR_UP   = rebinned_histos['fake_MU_FR_UP_sr_mue_os'+jet]
	h2meFakes_MU_FR_DOWN = rebinned_histos['fake_MU_FR_DOWN_sr_mue_os'+jet]

	h2em                 = rebinned_histos['data_NOM_sr_emu_os'+jet]
	h2emFakes            = rebinned_histos['fake_NOM_sr_emu_os'+jet]
	h2emFakes_EL_RE_UP   = rebinned_histos['fake_EL_RE_UP_sr_emu_os'+jet]
	h2emFakes_EL_RE_DOWN = rebinned_histos['fake_EL_RE_DOWN_sr_emu_os'+jet]
	h2emFakes_EL_FR_UP   = rebinned_histos['fake_EL_FR_UP_sr_emu_os'+jet]
	h2emFakes_EL_FR_DOWN = rebinned_histos['fake_EL_FR_DOWN_sr_emu_os'+jet]
	h2emFakes_MU_RE_UP   = rebinned_histos['fake_MU_RE_UP_sr_emu_os'+jet]
	h2emFakes_MU_RE_DOWN = rebinned_histos['fake_MU_RE_DOWN_sr_emu_os'+jet]
	h2emFakes_MU_FR_UP   = rebinned_histos['fake_MU_FR_UP_sr_emu_os'+jet]
	h2emFakes_MU_FR_DOWN = rebinned_histos['fake_MU_FR_DOWN_sr_emu_os'+jet]

	h2sg                 = rebinned_histos['signaltaumu_NOM_sr_mue_os'+jet]
	h2wrsg               = rebinned_histos['signaltaue_NOM_sr_mue_os'+jet]

        for sample, variations, em_mes in [('data', data_variations, ('emu', 'mue')),
                                           ('fake', fake_variations, ('emu', 'mue')),
                                           ('signaltaumu', ('NOM',),    ('mue',)),
                                           ('signaltaue',  ('NOM',),    ('mue',))]:
            for variation in variations:
                for em_me in em_mes:
                    key = sample+'_'+variation+'_sr_'+em_me+'_os'+jet
                    h_orig =          histos[key]
                    h_rebn = rebinned_histos[key]
                    xaxis = h_orig.GetXaxis()
                    yaxis = h_orig.GetYaxis()
                    for x in range(xaxis.GetNbins()):
                        for y in range(yaxis.GetNbins()):
                            i=x+1
                            j=y+1
                            ix = xaxis.GetBinCenter(i)
                            jy = yaxis.GetBinCenter(j)
                            h_rebn.Fill(ix, jy, h_orig.GetBinContent(i, j))

	## Rebin uniformly to indices
        xaxis = h2me.GetXaxis()
        yaxis = h2me.GetYaxis()
	nbinsx = xaxis.GetNbins()
	nbinsy = yaxis.GetNbins()
	origin_pt_bins = array.array('f', [xaxis.GetBinLowEdge(j+1) for j in range(nbinsx+1)])
	origin_m_bins  = array.array('f', [yaxis.GetBinLowEdge(k+1) for k in range(nbinsy+1)])
	n_m_bins = len(origin_m_bins)-1
        title = ";Mcoll (GeV)"
        m_binning = (n_m_bins, origin_m_bins)
	c3 = ROOT.TCanvas("c3%s"%jet,"Mcol%s"%jet,800,800)
	c3.Divide(3,len(target_pt1_bins)-1)
	for i in range(len(target_pt1_bins)-1):
		hme1 = ROOT.TH1F("Mcoll_data_ME_l1pt%i%s"%(i,jet),  title, *m_binning)
		hem1 = ROOT.TH1F("Mcoll_data_EM_l1pt%i%s"%(i,jet),  title, *m_binning)
		hemFakes1 = ROOT.TH1F("Mcoll_Fakes_EM_l1pt%i%s"%(i,jet),  title, *m_binning)
		hmeFakes1 = ROOT.TH1F("Mcoll_Fakes_M_l1pt%i%s"%(i,jet),  title, *m_binning)
		hemFakes_EL_RE_UP1   = ROOT.TH1F("Mcoll_Fakes_EL_RE_UP_EM_l1pt%i%s"%(i,jet),  title, *m_binning)
	        hmeFakes_EL_RE_UP1   = ROOT.TH1F("Mcoll_Fakes_EL_RE_UP_ME_l1pt%i%s"%(i,jet),  title, *m_binning)
		hemFakes_EL_RE_DOWN1 = ROOT.TH1F("Mcoll_Fakes_EL_RE_DOWN_EM_l1pt%i%s"%(i,jet),  title, *m_binning)
	        hmeFakes_EL_RE_DOWN1 = ROOT.TH1F("Mcoll_Fakes_EL_RE_DOWN_ME_l1pt%i%s"%(i,jet),  title, *m_binning)
		hemFakes_EL_FR_UP1   = ROOT.TH1F("Mcoll_Fakes_EL_FR_UP_EM_l1pt%i%s"%(i,jet),  title, *m_binning)
	        hmeFakes_EL_FR_UP1   = ROOT.TH1F("Mcoll_Fakes_EL_FR_UP_ME_l1pt%i%s"%(i,jet),  title, *m_binning)
		hemFakes_EL_FR_DOWN1 = ROOT.TH1F("Mcoll_Fakes_EL_FR_DOWN_EM_l1pt%i%s"%(i,jet),  title, *m_binning)
	        hmeFakes_EL_FR_DOWN1 = ROOT.TH1F("Mcoll_Fakes_EL_FR_DOWN_ME_l1pt%i%s"%(i,jet),  title, *m_binning)
		hemFakes_MU_RE_UP1   = ROOT.TH1F("Mcoll_Fakes_MU_RE_UP_EM_l1pt%i%s"%(i,jet),  title, *m_binning)
	        hmeFakes_MU_RE_UP1   = ROOT.TH1F("Mcoll_Fakes_MU_RE_UP_ME_l1pt%i%s"%(i,jet),  title, *m_binning)
		hemFakes_MU_RE_DOWN1 = ROOT.TH1F("Mcoll_Fakes_MU_RE_DOWN_EM_l1pt%i%s"%(i,jet),  title, *m_binning)
	        hmeFakes_MU_RE_DOWN1 = ROOT.TH1F("Mcoll_Fakes_MU_RE_DOWN_ME_l1pt%i%s"%(i,jet),  title, *m_binning)
		hemFakes_MU_FR_UP1   = ROOT.TH1F("Mcoll_Fakes_MU_FR_UP_EM_l1pt%i%s"%(i,jet),  title, *m_binning)
	        hmeFakes_MU_FR_UP1   = ROOT.TH1F("Mcoll_Fakes_MU_FR_UP_ME_l1pt%i%s"%(i,jet),  title, *m_binning)
		hemFakes_MU_FR_DOWN1 = ROOT.TH1F("Mcoll_Fakes_MU_FR_DOWN_EM_l1pt%i%s"%(i,jet),  title, *m_binning)
	        hmeFakes_MU_FR_DOWN1 = ROOT.TH1F("Mcoll_Fakes_MU_FR_DOWN_ME_l1pt%i%s"%(i,jet),  title, *m_binning)
		hsg1                 = ROOT.TH1F("Mcoll_signal_ME_l1pt%i%s"%(i,jet),title, *m_binning)
		hwrsg1               = ROOT.TH1F("Mcoll_wrong_signal_ME_l1pt%i%s"%(i,jet),title, *m_binning)

		mem.append(hme1)
		mem.append(hem1)
		mem.append(hsg1)
		mem.append(hwrsg1)

                for h_m, h_m_vs_pt in [(hme1,                h2me),
                                       (hem1,                h2em),
                                       (hsg1,                h2sg),
                                       (hwrsg1,              h2wrsg),
                                       (hemFakes1,           h2emFakes),
                                       (hmeFakes1,           h2meFakes),
                                       (hemFakes_EL_RE_UP1,  h2emFakes_EL_RE_UP),
                                       (hmeFakes_EL_RE_UP1,  h2meFakes_EL_RE_UP),
                                       (hemFakes_EL_RE_DOWN1,h2emFakes_EL_RE_DOWN),
                                       (hmeFakes_EL_RE_DOWN1,h2meFakes_EL_RE_DOWN),
                                       (hemFakes_EL_FR_UP1,  h2emFakes_EL_FR_UP),
                                       (hmeFakes_EL_FR_UP1,  h2meFakes_EL_FR_UP),
                                       (hemFakes_EL_FR_DOWN1,h2emFakes_EL_FR_DOWN),
                                       (hmeFakes_EL_FR_DOWN1,h2meFakes_EL_FR_DOWN),
                                       (hemFakes_MU_RE_UP1,  h2emFakes_MU_RE_UP),
                                       (hmeFakes_MU_RE_UP1,  h2meFakes_MU_RE_UP),
                                       (hemFakes_MU_RE_DOWN1,h2emFakes_MU_RE_DOWN),
                                       (hmeFakes_MU_RE_DOWN1,h2meFakes_MU_RE_DOWN),
                                       (hemFakes_MU_FR_UP1,  h2emFakes_MU_FR_UP),
                                       (hmeFakes_MU_FR_UP1,  h2meFakes_MU_FR_UP),
                                       (hemFakes_MU_FR_DOWN1,h2emFakes_MU_FR_DOWN),
                                       (hmeFakes_MU_FR_DOWN1,h2meFakes_MU_FR_DOWN),
                                       ]:

                        pt_min = target_pt1_bins[i]
                        pt_max = target_pt1_bins[i+1]
                        slice_histo_in_pt(h_m_vs_pt, h_m, pt_min, pt_max)
		#### ADD SIGNAL TO SUM MC ### DG I think this is wrong; these are not the tot mc, but data
		hme1.Add(hsg1,strength)
		hem1.Add(hwrsg1,strength)
		####

		c3.cd(3*i+1)
		hme1.Draw()
		#tla.DrawLatexNDC(0.3,0.8,"Mcoll data ME %s l1pt %i-%i"%(jet,target_pt1_bins[i],target_pt1_bins[i+1]))
		c3.cd(3*i+2)
		hem1.Draw()
		#tla.DrawLatexNDC(0.3,0.8,"Mcoll data EM %s l1pt %i-%i"%(jet,target_pt1_bins[i],target_pt1_bins[i+1]))
		c3.cd(3*i+3)
		hsg1.Draw()
		#tla.DrawLatexNDC(0.3,0.8,"Mcoll signal ME %s l1pt %i-%i"%(jet,target_pt1_bins[i],target_pt1_bins[i+1]))
		fw1.cd()
		hme1.Write()
		hem1.Write()
		hsg1.Write()
		hwrsg1.Write()
		if False: print "Rebin histos"
		##throw away first bins
		nthrow = 0
                title = ';Mcoll (index)'
                basename = ''
                n_m_bins_pruned = len(origin_m_bins)-nthrow
                pre_name = 'Mcoll_'
                suf_name = "l1pt%i%s_rebin"%(i,jet)
                binning = (n_m_bins_pruned,0,n_m_bins_pruned)
		hme2                 = ROOT.TH1F(pre_name+'_data_ME_'        +suf_name, title,*binning)
		hem2                 = ROOT.TH1F(pre_name+'_data_EM_'        +suf_name, title,*binning)
		hsg2                 = ROOT.TH1F(pre_name+'_signal_ME_'      +suf_name, title,*binning)
		hwrsg2               = ROOT.TH1F(pre_name+'_wrong_signal_ME_'+suf_name, title,*binning)
                pre_name = 'Mcoll_Fakes'
		hemFakes2            = ROOT.TH1F(pre_name+'_Fakes_EM_'       +suf_name, title,*binning)
		hmeFakes2            = ROOT.TH1F(pre_name+'_Fakes_ME_'       +suf_name, title,*binning)
		hemFakes_EL_RE_UP2   = ROOT.TH1F(pre_name+'_EL_RE_UP_EM_'    +suf_name, title,*binning)
	        hmeFakes_EL_RE_UP2   = ROOT.TH1F(pre_name+'_EL_RE_UP_ME_'    +suf_name, title,*binning)
		hemFakes_EL_RE_DOWN2 = ROOT.TH1F(pre_name+'_EL_RE_DOWN_EM_'  +suf_name, title,*binning)
	        hmeFakes_EL_RE_DOWN2 = ROOT.TH1F(pre_name+'_EL_RE_DOWN_ME_'  +suf_name, title,*binning)
		hemFakes_EL_FR_UP2   = ROOT.TH1F(pre_name+'_EL_FR_UP_EM_'    +suf_name, title,*binning)
	        hmeFakes_EL_FR_UP2   = ROOT.TH1F(pre_name+'_EL_FR_UP_ME_'    +suf_name, title,*binning)
		hemFakes_EL_FR_DOWN2 = ROOT.TH1F(pre_name+'_EL_FR_DOWN_EM_'  +suf_name, title,*binning)
	        hmeFakes_EL_FR_DOWN2 = ROOT.TH1F(pre_name+'_EL_FR_DOWN_ME_'  +suf_name, title,*binning)
		hemFakes_MU_RE_UP2   = ROOT.TH1F(pre_name+'_MU_RE_UP_EM_'    +suf_name, title,*binning)
	        hmeFakes_MU_RE_UP2   = ROOT.TH1F(pre_name+'_MU_RE_UP_ME_'    +suf_name, title,*binning)
		hemFakes_MU_RE_DOWN2 = ROOT.TH1F(pre_name+'_MU_RE_DOWN_EM_'  +suf_name, title,*binning)
	        hmeFakes_MU_RE_DOWN2 = ROOT.TH1F(pre_name+'_MU_RE_DOWN_ME_'  +suf_name, title,*binning)
		hemFakes_MU_FR_UP2   = ROOT.TH1F(pre_name+'_MU_FR_UP_EM_'    +suf_name, title,*binning)
	        hmeFakes_MU_FR_UP2   = ROOT.TH1F(pre_name+'_MU_FR_UP_ME_'    +suf_name, title,*binning)
		hemFakes_MU_FR_DOWN2 = ROOT.TH1F(pre_name+'_MU_FR_DOWN_EM_'  +suf_name, title,*binning)
	        hmeFakes_MU_FR_DOWN2 = ROOT.TH1F(pre_name+'_MU_FR_DOWN_ME_'  +suf_name, title,*binning)

		mem.append(hme2)
		mem.append(hem2)
		mem.append(hemFakes2)
		mem.append(hmeFakes2)
		mem.append(hsg2)
		mem.append(hwrsg2)

		for b in range(n_m_bins_pruned):
                        for h_orig, h_dest in [(hme1,                 hme2),
                                               (hem1,                 hem2),
                                               (hsg1,                 hsg2),
                                               (hwrsg1,               hwrsg2),
                                               (hemFakes1,            hemFakes2),
                                               (hmeFakes1,            hmeFakes2),
                                               (hemFakes_EL_RE_UP1,   hemFakes_EL_RE_UP2),
                                               (hmeFakes_EL_RE_UP1,   hmeFakes_EL_RE_UP2),
                                               (hemFakes_EL_RE_DOWN1, hemFakes_EL_RE_DOWN2),
                                               (hmeFakes_EL_RE_DOWN1, hmeFakes_EL_RE_DOWN2),
                                               (hemFakes_EL_FR_UP1,   hemFakes_EL_FR_UP2),
                                               (hmeFakes_EL_FR_UP1,   hmeFakes_EL_FR_UP2),
                                               (hemFakes_EL_FR_DOWN1, hemFakes_EL_FR_DOWN2),
                                               (hmeFakes_EL_FR_DOWN1, hmeFakes_EL_FR_DOWN2),
                                               (hemFakes_MU_RE_UP1,   hemFakes_MU_RE_UP2),
                                               (hmeFakes_MU_RE_UP1,   hmeFakes_MU_RE_UP2),
                                               (hemFakes_MU_RE_DOWN1, hemFakes_MU_RE_DOWN2),
                                               (hmeFakes_MU_RE_DOWN1, hmeFakes_MU_RE_DOWN2),
                                               (hemFakes_MU_FR_UP1,   hemFakes_MU_FR_UP2),
                                               (hmeFakes_MU_FR_UP1,   hmeFakes_MU_FR_UP2),
                                               (hemFakes_MU_FR_DOWN1, hemFakes_MU_FR_DOWN2),
                                               (hmeFakes_MU_FR_DOWN1, hmeFakes_MU_FR_DOWN2),
                                               ]:
                                bin_orig = b+1+nthrow
                                bin_dest = b+1
                                if h_orig.GetBinContent(bin_orig)>0:
                                        h_dest.SetBinContent(bin_dest, h_orig.GetBinContent(bin_orig))
                                        h_dest.SetBinError  (bin_dest, h_orig.GetBinError  (bin_orig))
                                else:
                                        h_dest.SetBinContent(bin_dest, 0.001)
                                        h_dest.SetBinError  (bin_dest, 0.00001)
			if hwrsg2.GetBinContent(b+1)<0: # why a different treatment for hwrsg2 ?
				print "NEGATIVE VALUES in wrong signal sample!"

		### Get scaling for fake systematics
		nomFakes_emu = hemFakes2.Integral()
		nomFakes_mue = hmeFakes2.Integral()
                l1pt_label = "l1pt{0:d}".format(i)
                for sys, hdo, hup in [('EL_RE', hemFakes_EL_RE_DOWN2, hemFakes_EL_RE_UP2),
                                      ('EL_FR', hemFakes_EL_FR_DOWN2, hemFakes_EL_FR_UP2),
                                      ('MU_RE', hemFakes_MU_RE_DOWN2, hemFakes_MU_RE_UP2),
                                      ('MU_FR', hemFakes_MU_FR_DOWN2, hemFakes_MU_FR_UP2)]:
                        norm_do = hdo.Integral()/nomFakes_emu
                        norm_up = hup.Integral()/nomFakes_emu
                        fake_systematics.add(emu_mue='emu', sysname=sys, jetvariation=jet, l1pt=l1pt_label, updown=(norm_up, norm_do))
                        hdo.Scale(1.0/norm_do)
                        hup.Scale(1.0/norm_up)
                for sys, hdo, hup in [('EL_RE', hmeFakes_EL_RE_DOWN2, hmeFakes_EL_RE_UP2),
                                      ('EL_FR', hmeFakes_EL_FR_DOWN2, hmeFakes_EL_FR_UP2),
                                      ('MU_RE', hmeFakes_MU_RE_DOWN2, hmeFakes_MU_RE_UP2),
                                      ('MU_FR', hmeFakes_MU_FR_DOWN2, hmeFakes_MU_FR_UP2)]:
                        norm_do = hdo.Integral()/nomFakes_mue
                        norm_up = hup.Integral()/nomFakes_mue
                        fake_systematics.add(emu_mue='mue', sysname=sys, jetvariation=jet, l1pt=l1pt_label, updown=(norm_up, norm_do))
                        hdo.Scale(1.0/norm_do)
                        hup.Scale(1.0/norm_up)

		### Create baseline Bkg histo as average
		h_BaseBkg = average_histogram(hme2, hem2, "Base_Bkg_l1pt%i%s"%(i,jet))

                for h in [h_BaseBkg,
                          hsg2, hwrsg2,
                          hme2, hem2,
                          hemFakes2,            hmeFakes2,
                          hemFakes_EL_RE_UP2,   hmeFakes_EL_RE_UP2,
                          hemFakes_EL_RE_DOWN2, hmeFakes_EL_RE_DOWN2,
                          hemFakes_EL_FR_UP2,   hmeFakes_EL_FR_UP2,
                          hemFakes_EL_FR_DOWN2, hmeFakes_EL_FR_DOWN2,
                          hemFakes_MU_RE_UP2,   hmeFakes_MU_RE_UP2,
                          hemFakes_MU_RE_DOWN2, hmeFakes_MU_RE_DOWN2,
                          hemFakes_MU_FR_UP2,   hmeFakes_MU_FR_UP2,
                          hemFakes_MU_FR_DOWN2, hmeFakes_MU_FR_DOWN2]:
                        h.Write()



	#c3.Update()
	c3.SaveAs(output_dir+"/Mcoll_SR%s.pdf"%jet)

	# mem.append(frME)
	# mem.append(frEM)
	#mem.append(frSig)
	#mem.append(c3)

#raw_input()

fw1.Close()
with open(output_dir+'/fake_systematics.py', 'w') as out_sys_file:
    out_sys_file.write(("# fake systematics evaluated on {0}\n".format(datetime.date.today().isoformat())
                       +pprint.pformat(fake_systematics.as_dict())
                       +'\n'))

while len(mem)>0:
	item = mem.pop(0)
	del item


