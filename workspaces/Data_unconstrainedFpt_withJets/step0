#!/usr/bin/env python
#
# Prepare the inputs for HistFactory
#
# Carlos.Solans@cern.ch,  January 2014
# davide.gerbaudo@gmail.com, rewrite May 2015

import ROOT
ROOT.gROOT.SetBatch(True)
import argparse
from collections import defaultdict
from math import sqrt
import datetime
import os
import pprint
import sys
#import AtlasStyle
import array

program_description="""
Prepare a dataset based on the inputs from Suneet (TH2D l1pt vs Mcoll)

Example:
> %(prog)s ./Apr_26_histos/ ./data/ --verbose
"""
def main():
    parser = argparse.ArgumentParser(description=program_description, usage='%(prog)s input output [options]')
    parser.add_argument('input_dir', help='directory containing the 2D histograms')
    parser.add_argument('output_dir', help='directory where the output will be stored')
    parser.add_argument('-p', '--plot', action='store_true', help='plot rebinned histograms')
    parser.add_argument('-s', '--strength', default=0.0, help='strength of the injected signal (used for spurious test)')
    parser.add_argument('-v', '--verbose', action='store_true', help='increase output verbosity')
    parser.add_argument('-d', '--debug', action='store_true', help='increase output (useful only to debug things)')
    parser.add_argument('-n', '--negative', action='store_true', help='allow negative bin contents')
    parser.add_argument('--rebin-without-err', action='store_true', help='do not propagate errors when rebinning')
    parser.add_argument('--fake-sys', default='fake_systematics.py', help='where the normalization of the fake sys will be saved')
    args = parser.parse_args()
    input_dir = args.input_dir
    output_dir = mkdir_if_needed(args.output_dir)
    verbose = args.verbose
    debug = args.debug
    signal_strength = args.strength
    jet_variations = ['', '_jets']
    data_variations = ['NOM']
    fake_variations = ['NOM',
                       'EL_RE_UP', 'EL_RE_DOWN', 'EL_FR_UP', 'EL_FR_DOWN',
                       'MU_RE_UP', 'MU_RE_DOWN', 'MU_FR_UP', 'MU_FR_DOWN']
    sign_variations = ['NOM']
    samples_with_variations = [('data', data_variations, ('emu', 'mue')),
                               ('fake', fake_variations, ('emu', 'mue')),
                               ('signaltaumu', ('NOM',),    ('mue',)), # signal only goes in mue
                               ('signaltaue',  ('NOM',),    ('mue',))]
    output_file = ROOT.TFile(output_dir+"/simple.root","RECREATE")
    fake_systematics = FakeSystematicRegister()
    if verbose:
        print "being called as {0}".format(' '.join(os.sys.argv))
    for jet in jet_variations:
        # Target binning
        # target_pt1_bins = array.array('f',(0,10,15,20,25,30,35,240))
        # target_m_bins = (array.array('f', [0] + range(60, 250,  5) + range(250, 300, 10) + [300,320,350,400]) if jet=='' else
        #                  array.array('f', [0] + range(60, 120, 20) + range(120, 160, 10) + [160,180,200,230,260,300,350,400]))

        target_m_bins = (array.array('f',(0,60,65,70,75,80,85,90,95,100,105,110,115,
                                          120,125,130,135,140,145,150,155,160,165,
                                          170,175,180,185,190,195,200,205,210,215,
                                          220,225,230,235,240,245,250,260,270,280,
                                          290,300,320,350,400,450)) if jet=='' else
                         array.array('f',(0,60,80,100,120,130,140,150,160,180,200,230,260,300,350,400,450)))
        target_pt1_bins = array.array('f',(12,15,20,25,30,35,1000))

        files, histos = collect_inputs(input_dir, samples_with_variations, jet)

        # Rebin 2D histos ###
        if verbose: print "Rebinning {0}...".format(jet)
        n_target_pt1_bins = len(target_pt1_bins)-1
        n_target_m_bins = len(target_m_bins)-1

        template_histo = histos['data_NOM_sr_mue_os'+jet]
        title = ";{0};{1}".format(template_histo.GetXaxis().GetTitle(), template_histo.GetYaxis().GetTitle())
        binning = (n_target_pt1_bins, target_pt1_bins, n_target_m_bins, target_m_bins)
        rebinned_histos = {}
        for sample, variations, em_mes in samples_with_variations:
            for variation in variations:
                for em_me in em_mes:
                    key = sample+'_'+variation+'_sr_'+em_me+'_os'+jet
                    h_rebin_name = rebinned_histoname(sample, variation, em_me)
                    rebinned_histos[key] = ROOT.TH2F(h_rebin_name, title, *binning)
                    h_orig =          histos[key]
                    h_rebn = rebinned_histos[key]
                    xaxis = h_orig.GetXaxis()
                    yaxis = h_orig.GetYaxis()
                    # check_target_binning(h_orig, h_rebn, debug)
                    if args.rebin_without_err:
                        # this was the original rebinning, I think the error is wrong...leave it just for reference
                        for ix in range(1, 1+xaxis.GetNbins()):
                            for iy in range(1, 1+yaxis.GetNbins()):
                                x = xaxis.GetBinCenter(ix)
                                y = yaxis.GetBinCenter(iy)
                                h_rebn.Fill(x, y, h_orig.GetBinContent(ix, iy))
                    else:
                        fill_rebinned_histo(h_orig, h_rebn, debug)
                    def format_h2_summary(h):
                        return "{0}[{1}][{2}] ({3:.4f})".format(h.GetName(), h.GetNbinsX(), h.GetNbinsY(), h.Integral())
                    def format_h2_contents(h):
                        return ', '.join("%6.3f"%v for v in getBinContents(h))
                    def format_h2_errors(h):
                        return ', '.join("%6.3f"%v for v in getBinErrors(h))
                    if verbose: print "rebin {0} to {1}".format(format_h2_summary(h_orig), format_h2_summary(h_rebn))
                    if debug: print "rebinned:\n contents: {0}\n errors:   {1}".format(format_h2_contents(h_rebn), format_h2_errors(h_rebn))
                    if args.plot and sample=='data':
                        plot_2d_before_after(h_orig, h_rebn, output_dir+'/'+key)
	## Rebin uniformly to indices
        template_histo = rebinned_histos['data_NOM_sr_mue_os'+jet]
        xaxis = template_histo.GetXaxis()
        yaxis = template_histo.GetYaxis()
	nbinsx = xaxis.GetNbins()
	nbinsy = yaxis.GetNbins()
	origin_pt_bins = array.array('f', [xaxis.GetBinLowEdge(j+1) for j in range(nbinsx+1)])
	origin_m_bins  = array.array('f', [yaxis.GetBinLowEdge(k+1) for k in range(nbinsy+1)])
	n_m_bins = len(origin_m_bins)-1
        title = ";Mcoll (GeV)"
        m_binning = (n_m_bins, origin_m_bins)
        sliced_histos = {}
	for i in range(len(target_pt1_bins)-1):
            pt_min = target_pt1_bins[i]
            pt_max = target_pt1_bins[i+1]
            l1pt_key = "l1pt{0:d}".format(i)
            sliced_histos_this_pt = {}
            for sample, variations, em_mes in samples_with_variations:
                for variation in variations:
                    for em_me in em_mes:
                        key = sample+'_'+variation+'_sr_'+em_me+'_os'+jet
                        h_m_vs_pt = rebinned_histos[key]
                        h_m_name = pt_slice_histoname(sample=sample, variation=variation, em_me=em_me, pt_label=l1pt_key, jet=jet)
                        h_m =  ROOT.TH1F(h_m_name, title, *m_binning)
                        fill_pt_slice_histo(h_m_vs_pt, h_m, pt_min, pt_max)
                        sliced_histos_this_pt[key] = h_m
                        shift_negative_bins(h_m) # we might want to do this after adding the signal?
            sliced_histos[l1pt_key] = sliced_histos_this_pt
            hme1   = sliced_histos_this_pt['data_NOM_sr_mue_os'+jet]
            hem1   = sliced_histos_this_pt['data_NOM_sr_emu_os'+jet]
            hsg1   = sliced_histos_this_pt['signaltaumu_NOM_sr_mue_os'+jet]
            hwrsg1 = sliced_histos_this_pt['signaltaue_NOM_sr_mue_os'+jet]
            h_BaseBkg = average_histogram(hme1, hem1, "Base_Bkg_{0}{1}".format(l1pt_key, jet))
            ### ADD SIGNAL TO SUM MC ### DG I think this is wrong; these are not the tot mc, but data
            hme1.Add(hsg1,signal_strength)
            hem1.Add(hwrsg1,signal_strength)

            output_file.cd()
            for k, h in sliced_histos_this_pt.iteritems():
                h.Write()
            h_BaseBkg.Write()
	# Get scaling for fake systematics
	for i in range(len(target_pt1_bins)-1):
            l1pt_key = "l1pt{0:d}".format(i)
            histos =  sliced_histos[l1pt_key]
            for em_me in ['emu', 'mue']:
                h_nom = histos['fake_NOM_sr_mue_os'+jet]
                norm_nom = h_nom.Integral()
                for syst in ['EL_RE', 'EL_FR', 'MU_RE', 'MU_FR']:
                    h_up = histos['fake_'+syst+'_UP_sr_'+em_me+'_os'+jet]
                    h_do = histos['fake_'+syst+'_DOWN_sr_'+em_me+'_os'+jet]
                    norm_do = h_do.Integral()
                    norm_up = h_up.Integral()
                    try:
                        scale_do = (norm_do/norm_nom)
                        scale_up = (norm_up/norm_nom)
                    except ZeroDivisionError as zde:
                        if norm_up or norm_nom:
                            raise ZeroDivisionError("{0} but syst has non-zero normalization".format(zde))
                        scale_do = 1.0
                        scale_up = 1.0
                    fake_systematics.add(emu_mue=em_me, sysname=syst, jetvariation=jet, l1pt=l1pt_key, updown=(scale_up, scale_do))
                    h_do.Scale(1.0/scale_do)
                    h_up.Scale(1.0/scale_up)

    output_file.Close()
    out_fake_sys_filename = output_dir+'/'+args.fake_sys
    if verbose: print "saving fake systematic normalizations to {0}".format(out_fake_sys_filename)
    with open(out_fake_sys_filename, 'w') as out_sys_file:
        out_sys_file.write(("# fake systematics evaluated on {0}\n".format(datetime.date.today().isoformat())
                           +pprint.pformat(fake_systematics.as_dict())
                           +'\n'))
#___________________________________________________________

def mkdir_if_needed(dirname) :
    dest_dir = None
    if os.path.exists(dirname) and os.path.isdir(dirname) :
        dest_dir = dirname
    elif not os.path.exists(dirname) :
        os.makedirs(dirname)
        dest_dir = dirname
    if not dest_dir:
        raise IOError("cannot create ouput dir %s"%dirname)
    return dest_dir

def collect_inputs(input_dir, samples_with_variations, jet):
    files = {}
    histos = {}
    for sample, variations, emu_mues in samples_with_variations:
        for variation in variations:
            for em_me in emu_mues:
                key = sample+'_'+variation+'_sr_'+em_me+'_os'+jet
                filename = input_dir+'/'+key+'.root'
                files[key] = ROOT.TFile(filename)
                histoname = 'h_mcoll_vs_pt1_'+sample+'_'+variation+'_sr_'+em_me+'_os'+jet
                clonename = ""
                histo = files[key].Get(histoname)
                if not histo:
                    raise IOError("missing %s from %s"%(histoname, filename))
                else:
                    histos[key] = histo
    return files, histos

def check_target_binning(h_orig, h_rebin, verbose=False):
    "check that the target binning is a subset of the original binning"
    for ax_orig, ax_rebin in [(h_orig.GetXaxis(), h_rebin.GetXaxis()),
                              (h_orig.GetYaxis(), h_rebin.GetYaxis())]:
        bins_orig  = array.array('f', [ax_orig.GetBinLowEdge(i+1)  for i in range(ax_orig.GetNbins()+1)])
        bins_rebin = array.array('f', [ax_rebin.GetBinLowEdge(i+1) for i in range(ax_rebin.GetNbins()+1)])
        if verbose:
            print "checking axis {0}: orig[{1}] rebin[{2}]".format(ax_orig.GetTitle(), len(bins_orig), len(bins_rebin))
        if not set(bins_rebin).issubset(set(bins_orig)):
            wrong_bin_edges = set(bins_rebin) - set(bins_rebin).intersection(set(bins_orig))
            raise NotImplementedError("Rebin can only be done with matching bin edges\n"+
                                      "{0}: {1}\n".format(h_orig.GetName(), bins_orig)+
                                      "{0}: {1}\n".format(h_rebin.GetName(), bins_rebin)+
                                      "unmatched: {0}".format(wrong_bin_edges))

def fill_rebinned_histo(h_orig, h_rebn, verbose=False):
    "Fill the rebinned histogram; assumes you have already called check_target_binning()"

    class MacroBin:
        "A bin whose content is the sum of smaller bins, and whose error is the sum in quadrature of the errors"
        def __init__(self, ix=None, iy=None, w=0.0, err2=0.0):
            assert ix is not None and iy is not None,"MacroBin specify at least the coordinates"
            self.ix = ix
            self.iy = iy
            self.sumw = w
            self.sumerr2 = err2
        def add(self, other):
            self.sumw += other.sumw
            self.sumerr2 += other.sumerr2
        @property
        def err(self):
            return sqrt(self.sumerr2)
        def same_bin(self, other):
            return self.ix==other.ix and self.iy==other.iy

    xbins_orig = range(0, 1+1+h_orig.GetXaxis().GetNbins()) # also include underflow and overflow
    ybins_orig = range(0, 1+1+h_orig.GetYaxis().GetNbins())
    xcenters_orig = [h_orig.GetXaxis().GetBinCenter(b) for b in xbins_orig]
    ycenters_orig = [h_orig.GetYaxis().GetBinCenter(b) for b in ybins_orig]
    macrobins = []
    last_macrobin = None # cache it, since it will likely be used for the next bin as well (30% speedup)
    for i, x in zip(xbins_orig, xcenters_orig):
        k = h_rebn.GetXaxis().FindBin(x)
        for j, y in zip(ybins_orig, ycenters_orig):
            l = h_rebn.GetYaxis().FindBin(y)
            macrobin = MacroBin(ix=k, iy=l, w=h_orig.GetBinContent(i, j), err2=h_orig.GetBinError(i, j)**2)
            existing_macrobin = next((m for m in (([last_macrobin] if last_macrobin else [])
                                                  + macrobins)
                                      if m.same_bin(macrobin)), None)
            if existing_macrobin:
                existing_macrobin.add(macrobin)
            else:
                macrobins.append(macrobin)
            last_macrobin = existing_macrobin if existing_macrobin else macrobin
    for m in macrobins:
        h_rebn.SetBinContent(m.ix, m.iy, m.sumw)
        h_rebn.SetBinError(m.ix, m.iy, m.err)

def plot_2d_before_after(h_before, h_after, output_file):
    "plot the 2d histo before/after rebinning side-by-side"
    ROOT.gStyle.SetPadTickX(2)
    ROOT.gStyle.SetPadTickY(2)
    ROOT.gStyle.SetOptStat('meiour')
    c = ROOT.TCanvas(output_file, '', 800, 600)
    c.Divide(2,1)
    c.cd(1)
    h_before.Draw('col3z e text')
    # ROOT.gPad.SetLogx()
    h_before.GetXaxis().SetRangeUser(1.0e-6, 400.)
    c.Update()
    c.cd(2)
    h_after.Draw('col3z e text')
    # ROOT.gPad.SetLogx()
    h_after.GetXaxis().SetRangeUser(1.0e-6, 400.)
    c.Update()
    c.SaveAs(output_file+'.png')

def average_histogram(h1, h2, target_name='average_histo'):
    "Clone the first histograms and fill it with the bin-by-bin average of h1 and h2"
    h_out = h1.Clone(target_name)
    h_out.Add(h2)
    h_out.Scale(0.5)
    return h_out

def rebinned_histoname(sample='', variation='', em_me=''):
    "note that the naming here is slightly different; but use the same key"
    templ_h_name = 'h_SR_%s_Rebinned_mcollCorr_x_pt1_%s'
    hname = templ_h_name%('EM' if em_me=='emu' else
                          'ME' if em_me=='mue' else 'unknown',
                          sample+('' if variation=='NOM' else ('_'+variation)))  # todo: use _NOM also
    return hname

def fill_pt_slice_histo(h_m_vs_pt, h_m, pt_min, pt_max):
    "project 2D histo m_vs_pt on 1D m slicing a pt interval [pt_min, pt_max["
    xaxis = h_m_vs_pt.GetXaxis()
    yaxis = h_m_vs_pt.GetYaxis()
    nbinsx = xaxis.GetNbins()
    nbinsy = yaxis.GetNbins()
    origin_pt_bins = array.array('f', [xaxis.GetBinLowEdge(j+1) for j in range(nbinsx+1)])
    origin_m_bins  = array.array('f', [yaxis.GetBinLowEdge(k+1) for k in range(nbinsy+1)])
    n_m_bins = len(origin_m_bins)-1
    m_binning = (n_m_bins, origin_m_bins)
    dummy_histo = ROOT.TH1F("dummy", '', *m_binning)
    for pt in origin_pt_bins:
	if pt_min <= pt < pt_max:
	    for mass in origin_m_bins:
                dest_bin = dummy_histo.FindBin(mass)
                orig_bin = h_m_vs_pt.FindBin(pt, mass)
                dummy_histo.SetBinContent(dest_bin, h_m_vs_pt.GetBinContent(orig_bin))
                dummy_histo.SetBinError  (dest_bin, h_m_vs_pt.GetBinError  (orig_bin))
            h_m.Add(dummy_histo)

def pt_slice_histoname(sample='', variation='', em_me='', pt_label='', jet=''):
    "note again a slightly different convention; still use the same standard keys"
    templ_h_name = 'Mcoll_{sample}{variation}_{emme}_{l1pt}{jet}_rebin'
    sample = ('data' if sample=='data' else
              'Fakes' if sample=='fake' else
              'signal' if sample=='signaltaumu' else
              'wrong_signal' if sample=='signaltaue' else 'unknown')
    emme = ('EM' if em_me=='emu' else
            'ME' if em_me=='mue' else 'unknown')
    variation = '' if variation=='NOM' else ('_'+variation) # todo: use _NOM also
    h_name = templ_h_name.format(**{'sample':sample, 'variation':variation, 'emme': emme, 'l1pt': pt_label, 'jet':jet})
    return h_name

def shift_negative_bins(h, value=0.001, error=0.00001):
    """
    For all bins with negative content, force their content to value, error
    """
    bins = range(1, 1+h.GetXaxis().GetNbins())
    for b in bins:
        if h.GetBinContent(b)<0.0:
            h.SetBinContent(b, value)
            h.SetBinError  (b, error)
    # # DG-2015-05-19 : is this obsolete or needed? ask Avital
    # if hwrsg2.GetBinContent(b+1)<0: # why a different treatment for hwrsg2 ?
    #     print "NEGATIVE VALUES in wrong signal sample!"

class Variation(object):
    """
    Hold up/down normalization in fake variations
    """
    def __init__(self, emu_mue='', sysname='', jetvariation='', l1pt='', updown=(1.0, 1.0)):
        self.emme = emu_mue
        self.sys = sysname
        self.jet = jetvariation
        self.l1pt = l1pt
        self.up = updown[0]
        self.do = updown[1]
    def as_dict(self, precision=6):
        "stringified dictionary, so that we can set the precision"
        def as_string(f, precision=precision):
            precision = str(precision)
            return ("{0:."+precision+"f}").format(f)
        return {'UPvalue': self.up, 'DNvalue': self.do}
        # return "{'UPvalue': %s, 'DNvalue': %s}" % (as_string(self.up), as_string(self.do))

class FakeSystematicRegister(object):
    """
    Holder for the normalization scales of the fake systematics.
    Store the values and print them out to a file that is then fed to
    step1.
    """
    def __init__(self):
        self._variations = []
    def add(self, emu_mue='', sysname='', jetvariation='', l1pt='', updown=(1.0, 1.0)):
        self._variations.append(Variation(emu_mue, sysname, jetvariation, l1pt, updown))
    def as_dict(self):
        "example keys : [emu_MU_FR][_jets][l1pt0][UPvalue]"
        emu_mue        =  sorted(list(set(v.emme for v in self._variations)))
        systematics    = sorted(list(set(v.sys for v in self._variations)))
        jet_variations = sorted(list(set(v.jet for v in self._variations)))
        l1pts          = sorted(list(set(v.l1pt for v in self._variations)))
        # I could use a nested defaultdict, but then pprint doesn't work nicely
        out_dict = dict([(emme+'_'+syst,
                          dict([(j,
                                 dict([(l1pt, {})
                                       for l1pt in l1pts]))
                                for j in jet_variations]))
                          for emme in emu_mue for syst in systematics])
        for var in self._variations:
            out_dict[var.emme+'_'+var.sys][var.jet][var.l1pt] = var.as_dict()
        return out_dict

def getBinIndices(h) :
    "Return a list of the internal indices used by TH1/TH2/TH3; see TH1::GetBin for info on internal mapping"
    cname = h.Class().GetName()
    if   cname.startswith('TH1') :
        return [h.GetBin(i)
                for i in range(1, 1+h.GetNbinsX())]
    elif cname.startswith('TH2') :
        return [h.GetBin(i, j)
                for i in range(1, 1+h.GetNbinsX())
                for j in range(1, 1+h.GetNbinsY())]
    elif cname.startswith('TH3') :
        return [h.GetBin(i, j, k)
                for i in range(1, 1+h.GetNbinsX())
                for j in range(1, 1+h.GetNbinsY())
                for k in range(1, 1+h.GetNbinsZ())]
    else : return []

def getBinContents(h) :
    return [h.GetBinContent(b) for b in getBinIndices(h)]

def getBinErrors(h) :
    return [h.GetBinError(b) for b in getBinIndices(h)]


if __name__=='__main__':
    main()
